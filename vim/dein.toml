[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'vim-denops/denops.vim'

[[plugins]]
repo = 'haishanh/night-owl.vim'
hook_add = '''
  syntax enable
  colorscheme night-owl
'''

[[plugins]]
repo = 'itchyny/vim-gitbranch'

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
let g:lightline = {
  \   'active': {
  \     'left': [ 
  \               [ 'mode', 'paste' ],
  \               [ 'gitbranch', 'readonly', 'filename', 'modified' ] 
  \             ]
  \   },
  \   'component_function': {
  \    'gitbranch': 'gitbranch#name'
  \   },
  \ }
'''

[[plugins]]
repo = 'vim-jp/vimdoc-ja'

[[plugins]]
repo = 'lambdalisue/fern.vim'
hook_add = '''
  let g:fern#default_hidden=1
  augroup fern-keymap
    autocmd!
    autocmd FileType fern nmap <buffer> r <Plug>(fern-action-remove)
    autocmd FileType fern nmap <buffer> s <Plug>(fern-action-open:split)
    autocmd FileType fern nmap <buffer> v <Plug>(fern-action-open:vsplit)
  augroup END
  command! FernDrawerToggle :Fern . -drawer -reveal=% -toggle
  command! -nargs=1 -complete=file FernDoReveal :call <SID>fern_do_reveal(<q-args>)
  command! FernDoRevealCurrent :call <SID>fern_do_reveal_current_file()
  nnoremap <silent> <leader>nt :FernDrawerToggle<CR>
  nnoremap <silent> <leader>nr :FernDoRevealCurrent<CR>
  function! s:fern_do_reveal(path) abort
    let target = expand(a:path)
    execute 'FernDo ' . 'FernReveal ' . target
  endfunction
  function! s:fern_do_reveal_current_file() abort
    call s:fern_do_reveal(expand('%:.'))
  endfunction
'''

[[plugins]]
repo = 'lambdalisue/fern-hijack.vim'

[[plugins]]
repo = 'lambdalisue/fern-git-status.vim'

[[plugins]]
repo = 'junegunn/fzf'
merged = 0
hook_add = '''
  let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.85 } }
  if executable('fd')
    let $FZF_DEFAULT_COMMAND = 'fd --strip-cwd-prefix --type f -H --exclude ".git/"'
  endif
'''

[[plugins]]
repo = 'junegunn/fzf.vim'
depends = ['fzf']
hook_add = '''
  let g:fzf_preview_window = ['up:45%', 'ctrl-/']
  nnoremap <silent> <leader>f :Files<CR>
  nnoremap <silent> <leader>gf :GFiles<CR>
  nnoremap <silent> <leader>s :GFiles?<CR>
  nnoremap <silent> <leader>b :Buffers<CR>
'''
